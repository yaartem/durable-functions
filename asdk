[1mdiff --git a/DemoConsole/Program.cs b/DemoConsole/Program.cs[m
[1mindex da888be..567611e 100644[m
[1m--- a/DemoConsole/Program.cs[m
[1m+++ b/DemoConsole/Program.cs[m
[36m@@ -1,6 +1,9 @@[m
 ï»¿using System;[m
 using System.Collections.Generic;[m
[31m-using System.Threading;[m
[32m+[m[32musing System.Data.Odbc;[m
[32m+[m[32musing System.Diagnostics;[m
[32m+[m[32musing System.IO;[m
[32m+[m[32musing System.Linq;[m
 using PizzaCooking.Domain;[m
 [m
 namespace DemoConsole[m
[36m@@ -8,37 +11,64 @@[m [mnamespace DemoConsole[m
     class Program[m
     {[m
         static void Main()[m
[31m-        { [m
[32m+[m[32m        {[m
[32m+[m[32m            var sw = Stopwatch.StartNew();[m
[32m+[m
             var startTime = new DateTime(2019,3,27);[m
 [m
[31m-            List<Order> orders = new List<Order>[m
[32m+[m[32m            var orders = new Queue<Order>();[m
[32m+[m[32m            for (var i = 0; i < 300000; i++)[m
             {[m
[31m-                new Order(TimeSpan.FromMinutes(30), TimeSpan.FromSeconds(300), startTime, 1)[m
[31m-            };[m
[32m+[m[32m                orders.Enqueue([m
[32m+[m[32m                    new Order(TimeSpan.FromMinutes(30), TimeSpan.FromSeconds(300),[m
[32m+[m[32m                        startTime.AddMinutes(3 * i), i));[m
[32m+[m[32m            }[m
 [m
[31m-            Deliverer[] groupDeliverers = new Deliverer[2];[m
[31m-            groupDeliverers[0] = new Deliverer(111);[m
[31m-            groupDeliverers[1] = new Deliverer(222);[m
[32m+[m[32m            var groupDeliverers = Enumerable.Range(1, 10 * 2).Select(i => new Deliverer(i)).ToList();[m
 [m
             var currentTime = startTime;[m
 [m
[31m-            var count = 1;[m
[32m+[m[32m            var currentlyInProcessing = new List<(Order order, IEnumerator<int> process)>();[m
[32m+[m
[32m+[m[32m            var count = 0;[m
 [m
[31m-            for(int g=0;g<=orders.Count-1;g++)[m
[32m+[m[32m            while (currentlyInProcessing.Count > 0 || orders.Count > 0)[m
             {[m
[31m-                var ie = orders[g].GetSequence().GetEnumerator();[m
[31m-                while (ie.MoveNext())[m
[32m+[m[32m                currentTime = currentTime.AddMinutes(1);[m
[32m+[m[32m                //Console.WriteLine("Current Time: {0}", currentTime);[m
[32m+[m
[32m+[m[32m                var nextInProcessing = new List<(Order order, IEnumerator<int> process)>();[m
[32m+[m
[32m+[m[32m                if (orders.Count > 0)[m
                 {[m
[31m-                    foreach (Deliverer i in groupDeliverers) i.CheckOrder(orders[g]);[m
[31m-                    currentTime = currentTime.AddMinutes(1);[m
[31m-                    orders[g].CurrentTime = currentTime;[m
[31m-                    Console.WriteLine("Current Time: {0}", currentTime);[m
[31m-                    Thread.Sleep(200);[m
[32m+[m[32m                    var order = orders.Peek();[m
[32m+[m[32m                    if (order.OrderRecievedTime <= currentTime)[m
[32m+[m[32m                    {[m
[32m+[m[32m                        currentlyInProcessing.Add((order, order.GetSequence().GetEnumerator()));[m
[32m+[m[32m                        orders.Dequeue();[m
[32m+[m[32m                    }[m
                 }[m
[31m-                count++;[m
[31m-                orders.Add(new Order(TimeSpan.FromMinutes(30), TimeSpan.FromSeconds(300), currentTime, count));[m
[31m-                ie.Dispose();[m
[32m+[m
[32m+[m[32m                foreach (var item in currentlyInProcessing)[m
[32m+[m[32m                {[m
[32m+[m[32m                    item.order.CurrentTime = currentTime;[m
[32m+[m[32m                    if (item.process.MoveNext())[m
[32m+[m[32m                    {[m
[32m+[m[32m                        count++;[m
[32m+[m[32m                        nextInProcessing.Add(item);[m
[32m+[m[32m                        foreach (Deliverer i in groupDeliverers) i.CheckOrder(item.order);[m
[32m+[m[32m                    }[m
[32m+[m[32m                    else[m
[32m+[m[32m                    {[m
[32m+[m[32m                        item.process.Dispose();[m
[32m+[m[32m                    }[m
[32m+[m[32m                }[m
[32m+[m
[32m+[m[32m                currentlyInProcessing = nextInProcessing;[m
             }[m
[32m+[m
[32m+[m[32m            Console.WriteLine($"Finished {count} synchronizations in {sw.Elapsed.TotalSeconds} sec.");[m
[32m+[m[41m            [m
             Console.ReadKey();[m
         }[m
     }[m
[1mdiff --git a/PizzaCooking.Domain/Deliverer.cs b/PizzaCooking.Domain/Deliverer.cs[m
[1mindex 64e6e7a..c06c103 100644[m
[1m--- a/PizzaCooking.Domain/Deliverer.cs[m
[1m+++ b/PizzaCooking.Domain/Deliverer.cs[m
[36m@@ -21,7 +21,7 @@[m [mnamespace PizzaCooking.Domain[m
                 {[m
                     if (!order.Taken)[m
                     {[m
[31m-                        Console.WriteLine("Deliverer number {0} Took Order number{1} ", DelivererNum, order.OrderNumber);[m
[32m+[m[32m                        //Console.WriteLine("Deliverer number {0} Took Order number{1} ", DelivererNum, order.OrderNumber);[m
                         order.Taken = true;[m
                         Busy = true;[m
                         order.TimeTaken = order.CurrentTime;[m
[1mdiff --git a/PizzaCooking.Domain/Order.cs b/PizzaCooking.Domain/Order.cs[m
[1mindex 9a27ed3..fe2b173 100644[m
[1m--- a/PizzaCooking.Domain/Order.cs[m
[1m+++ b/PizzaCooking.Domain/Order.cs[m
[36m@@ -1,12 +1,10 @@[m
 ï»¿using System;[m
 using System.Collections.Generic;[m
[31m-using System.IO;[m
 [m
 namespace PizzaCooking.Domain[m
 {[m
     public class Order[m
     {[m
[31m-        static StreamWriter sw = new StreamWriter("Text.txt");[m
         public bool Taken=false;[m
         public IEnumerable<int> GetSequence()[m
         {[m
[36m@@ -14,21 +12,21 @@[m [mnamespace PizzaCooking.Domain[m
             {[m
                 State = "Is Cooking";[m
                 ShowState();[m
[31m-                yield return 1;[m
[32m+[m[32m                yield return 0;[m
             }[m
 [m
             while (CurrentTime >= OrderRecievedTime + TimeToCook && !Taken)[m
             {[m
                 State = "Is Ready";[m
                 ShowState();[m
[31m-                yield return 2;[m
[32m+[m[32m                yield return 0;[m
             }[m
 [m
             while (CurrentTime < TimeTaken+TimeToDeliver)[m
             {[m
                 State = "Is Delivering";[m
                 ShowState();[m
[31m-                yield return 3;[m
[32m+[m[32m                yield return 0;[m
             }[m
         }[m
 [m
[36m@@ -50,8 +48,7 @@[m [mnamespace PizzaCooking.Domain[m
 [m
         public void ShowState()[m
         {[m
[31m-            sw.WriteLine("{0} {1} {2}", OrderNumber, State, CurrentTime);[m
[31m-            Console.Write("Order number {0} {1} ", OrderNumber, State);[m
[32m+[m[32m            //Console.WriteLine("Order number {0} {1} ", OrderNumber, State);[m
         }[m
     }[m
 }[m
\ No newline at end of file[m
